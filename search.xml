<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMvc</title>
      <link href="/2022/03/27/SpringMvc-0/"/>
      <url>/2022/03/27/SpringMvc-0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h2><p>1.1、什么是MVC</p><p>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。<br>是将业务逻辑、数据、显示分离的方法来组织代码。<br>MVC主要作用是降低了视图与业务逻辑间的双向偶合。<br>MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异。<br><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p>最典型的MVC就是JSP + servlet + javabean的模式。[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-RvIA8L7I-1613122851049)(SpringMVC课堂笔记.assets/640.png)]</p><h2 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h2><p>在web早期的开发中，通常采用的都是Model1。<br>Model1中，主要分为两层，视图层和模型层。<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-iqOBGDEs-1613122851051)(SpringMVC课堂笔记.assets/641.png)]</p><p>Model1优点：架构简单，比较适合小型项目开发；</p><p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p><h2 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h2><p>Model2把一个项目分成三部分，包括视图、控制、模型。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rdEwr6nt-1613122851052)(SpringMVC课堂笔记.assets/642.webp)]</p><p>用户发请求<br>Servlet接收请求数据，并调用对应的业务逻辑方法<br>业务处理完毕，返回更新后的数据给servlet<br>servlet转向到JSP，由JSP来渲染页面<br>响应给前端更新后的页面<br>职责分析：</p><p>Controller：控制器</p><p>取得表单数据<br>调用业务逻辑<br>转向指定的页面<br>Model：模型</p><p>业务逻辑<br>保存数据的状态<br>View：视图</p><p>显示页面<br>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h2 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h2><p>新建一个Maven工程当做父工程！pom依赖！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;dependencies&gt;   &lt;dependency&gt;       &lt;groupId&gt;junit&lt;/groupId&gt;       &lt;artifactId&gt;junit&lt;/artifactId&gt;       &lt;version&gt;4.12&lt;/version&gt;   &lt;/dependency&gt;   &lt;dependency&gt;       &lt;groupId&gt;org.springframework&lt;/groupId&gt;       &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;       &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;   &lt;/dependency&gt;   &lt;dependency&gt;       &lt;groupId&gt;javax.servlet&lt;/groupId&gt;       &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;       &lt;version&gt;2.5&lt;/version&gt;   &lt;/dependency&gt;   &lt;dependency&gt;       &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;       &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;       &lt;version&gt;2.2&lt;/version&gt;   &lt;/dependency&gt;   &lt;dependency&gt;       &lt;groupId&gt;javax.servlet&lt;/groupId&gt;       &lt;artifactId&gt;jstl&lt;/artifactId&gt;       &lt;version&gt;1.2&lt;/version&gt;   &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p><p>导入servlet 和 jsp 的 jar 依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;dependency&gt;   &lt;groupId&gt;javax.servlet&lt;/groupId&gt;   &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;   &lt;version&gt;2.5&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;   &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;   &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;   &lt;version&gt;2.2&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写一个Servlet类，用来处理用户的请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package nuc.ss.servlet;//实现Servlet接口public class HelloServlet extends HttpServlet {   @Override   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {       //取得参数       String method = req.getParameter("method");       if (method.equals("add")){           req.getSession().setAttribute("msg","执行了add方法");      }       if (method.equals("delete")){           req.getSession().setAttribute("msg","执行了delete方法");      }       //业务逻辑       //视图跳转       req.getRequestDispatcher("/WEB-INF/jsp/hello.jsp").forward(req,resp);  }   @Override   protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {       doGet(req,resp);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;   &lt;title&gt;Kuangshen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;${msg}&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web.xml中注册Servlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"        version="4.0"&gt;   &lt;servlet&gt;       &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;       &lt;servlet-class&gt;com.kuang.servlet.HelloServlet&lt;/servlet-class&gt;   &lt;/servlet&gt;   &lt;servlet-mapping&gt;       &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;       &lt;url-pattern&gt;/user&lt;/url-pattern&gt;   &lt;/servlet-mapping&gt;&lt;/web-app&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置Tomcat，并启动测试</p><p>localhost:8080/user?method=add<br>localhost:8080/user?method=delete<br>MVC框架要做哪些事情</p><p>将url映射到java类或java类的方法 .<br>封装用户提交的数据 .<br>处理请求–调用相关的业务处理–封装响应数据 .<br>将响应的数据进行渲染 . jsp / html 等表示层数据 .<br>说明：</p><p> 常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等…</p><h1 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h1><h2 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h2><p><img src="https://img-blog.csdnimg.cn/20210212174323582.png#pic_center" alt="在这里插入图片描述"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p>我们为什么要学习SpringMVC呢?</p><p>Spring MVC的特点：</p><p>轻量级，简单易学<br>高效 , 基于请求响应的MVC框架<br>与Spring兼容性好，无缝结合<br>约定优于配置<br>功能强大：RESTful、数据验证、格式化、本地化、主题等<br>简洁灵活<br>Spring的web框架围绕DispatcherServlet [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等…所以我们要学习 .</p><p>最重要的一点还是用的人多 , 使用的公司多 .</p><h2 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h2><p>Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p><img src="https://img-blog.csdnimg.cn/2021021217433633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMjg3MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>Spring MVC框架像许多其他MVC框架一样, 以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他功能，DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)。</p><p>SpringMVC的原理如下图所示：</p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p>原图</p><p><img src="https://img-blog.csdnimg.cn/20210212174435482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMjg3MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>中文图</p><p><img src="https://img-blog.csdnimg.cn/20210212174451530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMjg3MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h2><p><img src="https://img-blog.csdnimg.cn/2021021618311218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMjg3MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p>简要分析执行流程</p><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p>如上url拆分成三部分：</p><p><a href="http://localhost:8080/">http://localhost:8080</a> ——&gt; 服务器域名</p><p>SpringMVC ——&gt; 部署在服务器上的web站点</p><p>hello ——&gt; 表示控制器</p><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p><p>Handler让具体的Controller执行。</p><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p><p>最终视图呈现给用户。</p><h1 id="3、第一个MVC程序"><a href="#3、第一个MVC程序" class="headerlink" title="3、第一个MVC程序"></a>3、第一个MVC程序</h1><h2 id="3-1、配置版"><a href="#3-1、配置版" class="headerlink" title="3.1、配置版"></a>3.1、配置版</h2><p>新建一个Moudle ， springmvc-02-hello ， 添加web的支持！</p><p>确定导入了SpringMVC 的依赖！</p><p>配置web.xml ， 注册DispatcherServlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"         version="4.0"&gt;    &lt;!--1.注册DispatcherServlet--&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:springmvc_servlet.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;!--启动级别-1--&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml : [servletname]-servlet.xml</p><p>说明，这里的名称要求是按照官方来的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加 处理映射器（可省略）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 处理器适配器（可省略）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 视图解析器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="InternalResourceViewResolver"&gt;   &lt;!--前缀--&gt;   &lt;property name="prefix" value="/WEB-INF/jsp/"/&gt;   &lt;!--后缀--&gt;   &lt;property name="suffix" value=".jsp"/&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.controller;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class Controller implements org.springframework.web.servlet.mvc.Controller {    @Override    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {        ModelAndView mv = new ModelAndView();        mv.addObject("msg","我成功了");        mv.setViewName("test");        return mv;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将自己的类交给SpringIOC容器，注册bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;${msg}&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置Tomcat 启动测试！</p><p><img src="C:\Users\23878\AppData\Roaming\Typora\typora-user-images\image-20220119195043274.png" alt="image-20220119195043274"></p><p>可能遇到的问题：访问出现404，排查步骤：</p><p>查看控制台输出，看一下是不是缺少了什么jar包。<br>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！<br>重启Tomcat 即可解决！<br><strong>小结：我们来看个注解版实现，这才是SpringMVC的精髓。</strong></p><h2 id="3-2、注解版"><a href="#3-2、注解版" class="headerlink" title="3.2、注解版"></a>3.2、注解版</h2><p>新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！</p><p>由于Maven可能存在资源过滤的问题，我们将配置完善</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;build&gt;   &lt;resources&gt;       &lt;resource&gt;           &lt;directory&gt;src/main/java&lt;/directory&gt;           &lt;includes&gt;               &lt;include&gt;**/*.properties&lt;/include&gt;               &lt;include&gt;**/*.xml&lt;/include&gt;           &lt;/includes&gt;           &lt;filtering&gt;false&lt;/filtering&gt;       &lt;/resource&gt;       &lt;resource&gt;           &lt;directory&gt;src/main/resources&lt;/directory&gt;           &lt;includes&gt;               &lt;include&gt;**/*.properties&lt;/include&gt;               &lt;include&gt;**/*.xml&lt;/include&gt;           &lt;/includes&gt;           &lt;filtering&gt;false&lt;/filtering&gt;       &lt;/resource&gt;   &lt;/resources&gt;&lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p><p>配置web.xml</p><p>注意点：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"        version="4.0"&gt;   &lt;!--1.注册servlet--&gt;   &lt;servlet&gt;       &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;       &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;       &lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;       &lt;init-param&gt;           &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;           &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;       &lt;/init-param&gt;       &lt;!-- 启动顺序，数字越小，启动越早 --&gt;       &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;   &lt;/servlet&gt;   &lt;!--所有请求都会被springmvc拦截 --&gt;   &lt;servlet-mapping&gt;       &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;       &lt;url-pattern&gt;/&lt;/url-pattern&gt;   &lt;/servlet-mapping&gt;&lt;/web-app&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/ 和 /* 的区别：</p><p>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。<br>&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。<br>添加Spring MVC配置文件</p><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      xmlns:context="http://www.springframework.org/schema/context"      xmlns:mvc="http://www.springframework.org/schema/mvc"      xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;   &lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;   &lt;context:component-scan base-package="nuc.ss.controller"/&gt;   &lt;!-- 让Spring MVC不处理静态资源 --&gt;   &lt;mvc:default-servlet-handler /&gt;   &lt;!--   支持mvc注解驱动       在spring中一般采用@RequestMapping注解来完成映射关系       要想使@RequestMapping注解生效       必须向上下文中注册DefaultAnnotationHandlerMapping       和一个AnnotationMethodHandlerAdapter实例       这两个实例分别在类级别和方法级别处理。       而annotation-driven配置帮助我们自动完成上述两个实例的注入。    --&gt;   &lt;mvc:annotation-driven /&gt;         &lt;!-- 视图解析器 --&gt;   &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"         id="internalResourceViewResolver"&gt;       &lt;!-- 前缀 --&gt;       &lt;property name="prefix" value="/WEB-INF/jsp/" /&gt;       &lt;!-- 后缀 --&gt;       &lt;property name="suffix" value=".jsp" /&gt;   &lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>annotation-driven配置帮助我们自动完成上述两个实例的注入。</strong></p><p>  <strong>&lt;mvc:annotation-driven /&gt;忘记添加了 浪费了半小时测试</strong></p><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><p>让IOC的注解生效</p><p>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …</p><p>MVC的注解驱动<br>配置视图解析器<br>创建Controller</p><p>编写一个Java控制类：nuc.ss.controller.HelloController , 注意编码规范</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package nuc.ss.controller;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;@Controller@RequestMapping("/HelloController")public class HelloController {   //真实访问地址 : 项目名/HelloController/hello   @RequestMapping("/hello")   public String sayHello(Model model){       //向模型中添加属性msg与值，可以在JSP页面中取出并渲染       model.addAttribute("msg","hello,SpringMVC");       //web-inf/jsp/hello.jsp       return "hello";  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Controller是为了让Spring IOC容器初始化时自动扫描到；<br>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；<br>方法中声明Model类型的参数是为了把Action中的数据带到视图中；<br>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/hello.jsp<br>创建视图层</p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p><p>可以通过EL表示取出Model中存放的值，或者对象；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;   &lt;title&gt;SpringMVC&lt;/title&gt;&lt;/head&gt;&lt;body&gt;${msg}&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置Tomcat运行</p><p>配置Tomcat ， 开启服务器 ， 访问 对应的请求路径！</p><p><img src="C:\Users\23878\AppData\Roaming\Typora\typora-user-images\image-20220119201019151.png" alt="image-20220119201019151"></p><p>OK，运行成功！</p><p>小结<br><strong>实现步骤其实非常的简单：</strong></p><p><strong>新建一个web项目</strong><br><strong>导入相关jar包</strong><br><strong>编写web.xml , 注册DispatcherServlet</strong><br><strong>编写springmvc配置文件</strong><br><strong>接下来就是去创建对应的控制类 , controller</strong><br><strong>最后完善前端视图和controller之间的对应</strong><br><strong>测试运行调试.</strong><br><strong>使用springMVC必须配置的三大件</strong></p><p>处理器映射器、处理器适配器、视图解析器</p><p>通常，我们只需要手动配置视图解析器，而处理器映射器和处理器适配器只需要开启注解驱动即可，而省去了大段的xml配置</p><h1 id="4、RestFul和控制器"><a href="#4、RestFul和控制器" class="headerlink" title="4、RestFul和控制器"></a>4、RestFul和控制器</h1><h3 id="4-1、控制器Controller"><a href="#4-1、控制器Controller" class="headerlink" title="4.1、控制器Controller"></a>4.1、控制器Controller</h3><p>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</p><p>控制器负责解析用户的请求并将其转换为一个模型。</p><p>在Spring MVC中一个控制器类可以包含多个方法</p><p>在Spring MVC中，对于Controller的配置方式有很多种</p><h3 id="4-2、实现Controller接口"><a href="#4-2、实现Controller接口" class="headerlink" title="4.2、实现Controller接口"></a>4.2、实现Controller接口</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><p>//实现该接口的类获得控制器功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface Controller {   //处理请求且返回一个模型与视图对象   ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws Exception;}Moudle，springmvc-04-controller！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个Moudle，springmvc-04-controller！</p><p>mvc的配置文件只留下 视图解析器！<br>编写一个Controller类，ControllerTest1</p><p>//定义控制器<br>//注意点：不要导错包，实现Controller接口，重写方法；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ControllerTest1 implements Controller {   public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {       //返回一个模型视图对象       ModelAndView mv = new ModelAndView();       mv.addObject("msg","Test1Controller");       mv.setViewName("test");       return mv;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p><bean name="/t1" class="nuc.ss.controller.ControllerTest1"><p>编写前端<strong>test.jsp</strong>，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;   &lt;title&gt;Kuangshen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;${msg}&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，OK！</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xn69Bm6v-1613122851061)(SpringMVC课堂笔记.assets/1595128496794.png)]</p><p>说明：</p><p>实现接口Controller定义控制器是较老的办法</p><p>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</p><p>使用注解@Controller<br>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --><p>&lt;context:component-scan base-package=”nuc.ss.controller”/&gt;</p><p>增加一个ControllerTest2类，使用注解实现；</p><p>//@Controller注解的类会自动添加到Spring上下文中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class ControllerTest2{   //映射访问路径   @RequestMapping("/t2")   public String index(Model model){       //Spring MVC会自动实例化一个Model对象用于向视图中传值       model.addAttribute("msg", "ControllerTest2");       //返回视图位置       return "test";  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行tomcat测试</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-E1opAo2b-1613122851062)(SpringMVC课堂笔记.assets/1595128649687.png)]</p><p>可以发现，我们的两个请求都可以指向一个视图(test)，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</p><p>注解方式是平时使用的最多的方式！</p><p>RequestMapping<br>@RequestMapping</p><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p><p>只注解在方法上面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class TestController {   @RequestMapping("/h1")   public String test(){       return "test";  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名 / h1</p><p>同时注解类与方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller@RequestMapping("/admin")public class TestController {   @RequestMapping("/h1")   public String test(){       return "test";  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名/ admin /h1 , 需要先指定类的路径再指定方法的路径；</p><h1 id="5、整合SSM框架"><a href="#5、整合SSM框架" class="headerlink" title="5、整合SSM框架"></a>5、整合SSM框架</h1><h2 id="1、环境要求"><a href="#1、环境要求" class="headerlink" title="1、环境要求"></a>1、环境要求</h2><p>环境：</p><p>IDEA</p><p>MySQL 5.7.19</p><p>Tomcat 9</p><p>Maven 3.6</p><p>要求：</p><p>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</p><h2 id="2、数据库环境"><a href="#2、数据库环境" class="headerlink" title="2、数据库环境"></a>2、数据库环境</h2><p>创建一个存放书籍数据的数据库表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">CREATE DATABASE `ssmbuild`; USE `ssmbuild`; DROP TABLE IF EXISTS `books`; CREATE TABLE `books` (`bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT '书id',`bookName` VARCHAR(100) NOT NULL COMMENT '书名',`bookCounts` INT(11) NOT NULL COMMENT '数量',`detail` VARCHAR(200) NOT NULL COMMENT '描述',KEY `bookID` (`bookID`)) ENGINE=INNODB DEFAULT CHARSET=utf8 INSERT  INTO `books`(`bookID`,`bookName`,`bookCounts`,`detail`)VALUES(1,'Java',1,'从入门到放弃'),(2,'MySQL',10,'从删库到跑路'),(3,'Linux',5,'从进门到进牢');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、基本环境搭建"><a href="#3、基本环境搭建" class="headerlink" title="3、基本环境搭建"></a>3、基本环境搭建</h2><h3 id="1、新建一Maven项目！ssmbuild-，-添加web的支持"><a href="#1、新建一Maven项目！ssmbuild-，-添加web的支持" class="headerlink" title="1、新建一Maven项目！ssmbuild ， 添加web的支持"></a>1、新建一Maven项目！ssmbuild ， 添加web的支持</h3><h3 id="2、导入相关的pom依赖！"><a href="#2、导入相关的pom依赖！" class="headerlink" title="2、导入相关的pom依赖！"></a>2、导入相关的pom依赖！</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;dependencies&gt;        &lt;!--Junit--&gt;        &lt;dependency&gt;            &lt;groupId&gt;junit&lt;/groupId&gt;            &lt;artifactId&gt;junit&lt;/artifactId&gt;            &lt;version&gt;4.12&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--数据库驱动--&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.47&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- 数据库连接池 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.mchange&lt;/groupId&gt;            &lt;artifactId&gt;c3p0&lt;/artifactId&gt;            &lt;version&gt;0.9.5.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--Servlet - JSP --&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;            &lt;version&gt;2.5&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;            &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;            &lt;version&gt;2.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;            &lt;artifactId&gt;jstl&lt;/artifactId&gt;            &lt;version&gt;1.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--Mybatis--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;            &lt;version&gt;3.5.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;            &lt;version&gt;2.0.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--Spring--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.22&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Maven资源过滤设置"><a href="#3、Maven资源过滤设置" class="headerlink" title="3、Maven资源过滤设置"></a>3、Maven资源过滤设置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;build&gt;   &lt;resources&gt;       &lt;resource&gt;           &lt;directory&gt;src/main/java&lt;/directory&gt;           &lt;includes&gt;               &lt;include&gt;**/*.properties&lt;/include&gt;               &lt;include&gt;**/*.xml&lt;/include&gt;           &lt;/includes&gt;           &lt;filtering&gt;false&lt;/filtering&gt;       &lt;/resource&gt;       &lt;resource&gt;           &lt;directory&gt;src/main/resources&lt;/directory&gt;           &lt;includes&gt;               &lt;include&gt;**/*.properties&lt;/include&gt;               &lt;include&gt;**/*.xml&lt;/include&gt;           &lt;/includes&gt;           &lt;filtering&gt;false&lt;/filtering&gt;       &lt;/resource&gt;   &lt;/resources&gt;&lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、建立基本结构和配置框架！"><a href="#4、建立基本结构和配置框架！" class="headerlink" title="4、建立基本结构和配置框架！"></a>4、建立基本结构和配置框架！</h3><ul><li>com.kuang.pojo</li><li>com.kuang.dao</li><li>com.kuang.service</li><li>com.kuang.controller</li><li>mybatis-config.xml</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration       PUBLIC "-//mybatis.org//DTD Config 3.0//EN"       "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>applicationContext.xml</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、Mybatis层编写"><a href="#4、Mybatis层编写" class="headerlink" title="4、Mybatis层编写"></a>4、Mybatis层编写</h2><h3 id="1、数据库配置文件"><a href="#1、数据库配置文件" class="headerlink" title="1、数据库配置文件"></a>1、数据库配置文件</h3><p> <strong>database.properties</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/commdity?useUnicode=true&amp;&amp;characterEncoding=utf8jdbc.username=rootjdbc.password=root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、IDEA关联数据库"><a href="#2、IDEA关联数据库" class="headerlink" title="2、IDEA关联数据库"></a>2、IDEA关联数据库</h3><h3 id="3、编写MyBatis的核心配置文件"><a href="#3、编写MyBatis的核心配置文件" class="headerlink" title="3、编写MyBatis的核心配置文件"></a>3、编写MyBatis的核心配置文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt;&lt;!--   配置数据源 交给Springq去做--&gt;    &lt;typeAliases&gt;        &lt;package name="leyue.ljp.pojo"/&gt;    &lt;/typeAliases&gt;    &lt;mappers&gt;        &lt;mapper class="leyue.ljp.dao.BookMapper"/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、编写数据库对应的实体类"><a href="#4、编写数据库对应的实体类" class="headerlink" title="4、编写数据库对应的实体类"></a>4、编写数据库对应的实体类</h3><p>com.kuang.pojo.Books</p><p>使用lombok插件！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@AllArgsConstructor@NoArgsConstructorpublic class Books {    private int bookID;    private String bookName;    private int bookCounts;    private String details;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、编写Dao层的-Mapper接口！"><a href="#5、编写Dao层的-Mapper接口！" class="headerlink" title="5、编写Dao层的 Mapper接口！"></a>5、编写Dao层的 Mapper接口！</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.dao;import leyue.ljp.pojo.Books;import java.util.List;public interface BookMapper {    //增加一个Book    int addBook(Books book);    //根据id删除一个Book    int deleteBookById(int id);    //更新Book    int updateBook(Books books);    //根据id查询,返回一个Book    Books queryBookById(int id);    //查询全部Book,返回list集合    List&lt;Books&gt; queryAllBook();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、编写接口对应的-Mapper-xml-文件。"><a href="#6、编写接口对应的-Mapper-xml-文件。" class="headerlink" title="6、编写接口对应的 Mapper.xml 文件。"></a>6、编写接口对应的 Mapper.xml 文件。</h3><p>需要导入MyBatis的包；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="leyue.ljp.dao.BookMapper"&gt;    &lt;!--增加一个Book--&gt;    &lt;insert id="addBook" parameterType="Books"&gt;        insert into commdity.books(bookName,bookCounts,details)        values (#{bookName}, #{bookCounts}, #{detail})    &lt;/insert&gt;    &lt;!--根据id删除一个Book--&gt;    &lt;delete id="deleteBookById" parameterType="int"&gt;        delete from commdity.books where bookID=#{bookID}    &lt;/delete&gt;    &lt;!--更新Book--&gt;    &lt;update id="updateBook" parameterType="Books"&gt;        update commdity.books        set bookName = #{bookName},bookCounts = #{bookCounts},details = #{detail}        where bookID = #{bookID}    &lt;/update&gt;    &lt;!--根据id查询,返回一个Book--&gt;    &lt;select id="queryBookById" resultType="Books"&gt;        select * from commdity.books        where bookID = #{bookID}    &lt;/select&gt;    &lt;!--查询全部Book--&gt;    &lt;select id="queryAllBook" resultType="Books"&gt;        SELECT * from commdity.books    &lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、编写Service层的接口和实现类"><a href="#7、编写Service层的接口和实现类" class="headerlink" title="7、编写Service层的接口和实现类"></a>7、编写Service层的接口和实现类</h3><p>接口类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.service;import leyue.ljp.pojo.Books;import org.apache.ibatis.annotations.Mapper;import org.springframework.stereotype.Repository;import java.util.List;//BookService:底下需要去实现,调用dao层public interface BookService {    //增加一个Book    int addBook(Books book);    //根据id删除一个Book    int deleteBookById(int id);    //更新Book    int updateBook(Books books);    //根据id查询,返回一个Book    Books queryBookById(int id);    //查询全部Book,返回list集合    List&lt;Books&gt; queryAllBook();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.service;import leyue.ljp.dao.BookMapper;import leyue.ljp.pojo.Books;import java.util.List;public class BookServiceImpl implements BookService {    //调用dao层的操作，设置一个set接口，方便Spring管理    private BookMapper bookMapper;    public void setBookMapper(BookMapper bookMapper) {        this.bookMapper = bookMapper;    }    public int addBook(Books book) {        return bookMapper.addBook(book);    }    public int deleteBookById(int id) {        return bookMapper.deleteBookById(id);    }    public int updateBook(Books books) {        return bookMapper.updateBook(books);    }    public Books queryBookById(int id) {        return bookMapper.queryBookById(id);    }    public List&lt;Books&gt; queryAllBook() {        return bookMapper.queryAllBook();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>OK，到此，底层需求操作编写完毕！</strong></p><h2 id="5、Spring层"><a href="#5、Spring层" class="headerlink" title="5、Spring层"></a>5、Spring层</h2><h3 id="1、配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；"><a href="#1、配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；" class="headerlink" title="1、配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；"></a>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</h3><h3 id="2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao-xml"><a href="#2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao-xml" class="headerlink" title="2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml"></a>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd"&gt;    &lt;!-- 配置整合mybatis --&gt;    &lt;!-- 1.关联数据库文件 --&gt;    &lt;context:property-placeholder location="classpath:database.properties"/&gt;    &lt;!-- 2.数据库连接池 --&gt;    &lt;!--数据库连接池        dbcp 半自动化操作 不能自动连接        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）    --&gt;    &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;        &lt;!-- 配置连接池属性 --&gt;        &lt;property name="driverClass" value="${jdbc.driver}"/&gt;        &lt;property name="jdbcUrl" value="${jdbc.url}"/&gt;        &lt;property name="user" value="${jdbc.username}"/&gt;        &lt;property name="password" value="${jdbc.password}"/&gt;        &lt;!-- c3p0连接池的私有属性 --&gt;        &lt;property name="maxPoolSize" value="30"/&gt;        &lt;property name="minPoolSize" value="10"/&gt;        &lt;!-- 关闭连接后不自动commit --&gt;        &lt;property name="autoCommitOnClose" value="false"/&gt;        &lt;!-- 获取连接超时时间 --&gt;        &lt;property name="checkoutTimeout" value="10000"/&gt;        &lt;!-- 当获取连接失败重试次数 --&gt;        &lt;property name="acquireRetryAttempts" value="2"/&gt;    &lt;/bean&gt;    &lt;!-- 3.配置SqlSessionFactory对象 --&gt;    &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;        &lt;!-- 注入数据库连接池 --&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;        &lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;        &lt;property name="configLocation" value="classpath:mybatis-configger.xml"/&gt;    &lt;/bean&gt;    &lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;    &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;        &lt;!-- 注入sqlSessionFactory --&gt;        &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt;        &lt;!-- 给出需要扫描Dao接口包 --&gt;        &lt;property name="basePackage" value="leyue.ljp.dao"/&gt;    &lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、<strong>Spring整合service层</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"&gt;&lt;!--    扫描service 下面的包--&gt;    &lt;context:component-scan base-package="leyue.ljp.service" /&gt;&lt;!--    将我们的所有业务类注入到Spring 可以通过配置  或者注解实现--&gt;    &lt;bean id="BookServiceImpl" class="leyue.ljp.service.BookServiceImpl"&gt;        &lt;property name="bookMapper" ref="bookMapper"&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;!--    声明是事务配置--&gt;    &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;&lt;!--    aop事务支持--&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p><h2 id="6、SpringMVC层"><a href="#6、SpringMVC层" class="headerlink" title="6、SpringMVC层"></a>6、SpringMVC层</h2><h3 id="1、web-xml"><a href="#1、web-xml" class="headerlink" title="1、web.xml"></a>1、<strong>web.xml</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"         version="4.0"&gt;    &lt;!--DispatcherServlet--&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;            &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;!--encodingFilter--&gt;    &lt;filter&gt;        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;        &lt;filter-class&gt;            org.springframework.web.filter.CharacterEncodingFilter        &lt;/filter-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;encoding&lt;/param-name&gt;            &lt;param-value&gt;utf-8&lt;/param-value&gt;        &lt;/init-param&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;    &lt;!--Session过期时间--&gt;    &lt;session-config&gt;        &lt;session-timeout&gt;15&lt;/session-timeout&gt;    &lt;/session-config&gt;&lt;/web-app&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、spring-mvc-xml"><a href="#2、spring-mvc-xml" class="headerlink" title="2、spring-mvc.xml"></a>2、<strong>spring-mvc.xml</strong></h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/mvc   https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置SpringMVC --&gt;</span>    <span class="token comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.JstlView<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 4.扫描web相关的bean --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leyue.ljp.controller<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Spring配置整合文件"><a href="#3、Spring配置整合文件" class="headerlink" title="3、Spring配置整合文件"></a>3、Spring配置整合文件</h3><p><strong>applicationContext.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:spring-dao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:spring-mvc.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置文件，暂时结束！</strong></p><h3 id="Controller-和-视图层编写"><a href="#Controller-和-视图层编写" class="headerlink" title="Controller 和 视图层编写"></a><strong>Controller 和 视图层编写</strong></h3><h4 id="1、BookController-类编写"><a href="#1、BookController-类编写" class="headerlink" title="1、BookController 类编写"></a>1、BookController 类编写</h4><p> 方法一：查询全部书籍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.controller;import leyue.ljp.pojo.Books;import leyue.ljp.service.BookService;import leyue.ljp.service.BookServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import java.util.List;@Controller@RequestMapping("/book")public class BookController {    @Autowired    @Qualifier("BookServiceImpl")    private BookService bookService;    @RequestMapping("/allBook")    public String list(Model model) {        List&lt;Books&gt; list = bookService.queryAllBook();        model.addAttribute("list", list);        return "allBook";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、编写首页-index-jsp"><a href="#2、编写首页-index-jsp" class="headerlink" title="2、编写首页 index.jsp"></a>2、编写首页 <strong>index.jsp</strong></h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;  &lt;title&gt;首页&lt;/title&gt;  &lt;style type="text/css"&gt;    a {      text-decoration: none;      color: black;      font-size: 18px;    }    h3 {      width: 180px;      height: 38px;      margin: 100px auto;      text-align: center;      line-height: 38px;      background: deepskyblue;      border-radius: 4px;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;  &lt;a href="${pageContext.request.contextPath}/book/allBook"&gt;点击进入列表页&lt;/a&gt;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、书籍列表页面-allbook-jsp"><a href="#3、书籍列表页面-allbook-jsp" class="headerlink" title="3、书籍列表页面 allbook.jsp"></a>3、书籍列表页面 <strong>allbook.jsp</strong></h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;书籍列表&lt;/title&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;!-- 引入 Bootstrap --&gt;    &lt;link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="container"&gt;    &lt;div class="row clearfix"&gt;        &lt;div class="col-md-12 column"&gt;            &lt;div class="page-header"&gt;                &lt;h1&gt;                    &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;                &lt;/h1&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="row"&gt;        &lt;div class="col-md-4 column" &gt;            &lt;a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook"&gt;新增&lt;/a&gt;            &lt;a class="btn btn-primary" href="${pageContext.request.contextPath}/book/allBook"&gt;显示全部书籍&lt;/a&gt;        &lt;/div&gt;        &lt;div class="col-md-4 column" style="float: right"&gt;&lt;%--            查询书籍--%&gt;            &lt;form class="form-inline" action="${pageContext.request.contextPath}/book/queryBook" method="post"&gt;                &lt;span style="color: red;font-weight: bold"&gt;${error}&lt;/span&gt;                &lt;input type="text" name="queryBookName" class="form-control" placeholder="请输入要查询的书籍名称" &gt;                &lt;input type="submit" value="查询" class="btn btn-primary" &gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="row clearfix"&gt;        &lt;div class="col-md-12 column"&gt;            &lt;table class="table table-hover table-striped"&gt;                &lt;thead&gt;                &lt;tr&gt;                    &lt;th&gt;书籍编号&lt;/th&gt;                    &lt;th&gt;书籍名字&lt;/th&gt;                    &lt;th&gt;书籍数量&lt;/th&gt;                    &lt;th&gt;书籍详情&lt;/th&gt;                    &lt;th&gt;操作&lt;/th&gt;                &lt;/tr&gt;                &lt;/thead&gt;                &lt;tbody&gt;                &lt;c:forEach var="book" items="${requestScope.get('list')}"&gt;                    &lt;tr&gt;                        &lt;td&gt;${book.getBookID()}&lt;/td&gt;                        &lt;td&gt;${book.getBookName()}&lt;/td&gt;                        &lt;td&gt;${book.getBookCounts()}&lt;/td&gt;                        &lt;td&gt;${book.getDetails()}&lt;/td&gt;                        &lt;td&gt;                            &lt;a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookID()}"class="btn btn-primary"&gt;更改&lt;/a&gt; |                            &lt;a href="${pageContext.request.contextPath}/book/del/${book.getBookID()}" class="btn btn-primary"&gt;删除&lt;/a&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                &lt;/c:forEach&gt;                &lt;/tbody&gt;            &lt;/table&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.查询 书籍（搜索框）</p><p>jsp:</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">   &lt;div class="col-md-4 column" style="float: right"&gt;&lt;%-- 查询书籍--%&gt;            &lt;form class="form-inline" action="${pageContext.request.contextPath}/book/queryBook" method="post"&gt;                &lt;span style="color: red;font-weight: bold"&gt;${error}&lt;/span&gt;                &lt;input type="text" name="queryBookName" class="form-control" placeholder="请输入要查询的书籍名称" &gt;                &lt;input type="submit" value="查询" class="btn btn-primary" &gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dao层添加一个接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Books queryBookName(@Param("bookName")String bookName);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接口的xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBookName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select * from books where bookName =#{bookName}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>业务层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Books queryBookName(@Param("bookName")String bookName);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>业务的实现类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Books queryBookName(String bookName) {    return bookMapper.queryBookName(bookName);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Controller:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@PostMapping("/queryBook")public String queryBookName(String queryBookName, Model model) throws IOException {    //调用查询方法    Books books = bookService.queryBookName(queryBookName);    System.err.println(books);    List&lt;Books&gt; list = new ArrayList&lt;Books&gt;();    list.add(books);    if (books==null){        list = bookService.queryAllBook();        model.addAttribute("error","未查到");    }    model.addAttribute("list",list);    return "allBook";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-运行结果"><a href="#7-运行结果" class="headerlink" title="7.运行结果"></a>7.运行结果</h2><p><img src="C:\Users\23878\AppData\Roaming\Typora\typora-user-images\image-20220121211730069.png" alt="image-20220121211730069"></p><p>1.这个useSSL是错的</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">jdbc.url=jdbc:mysql://localhost:3306/commdity?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">jdbc.url=jdbc:mysql://localhost:3306/commdity?useUnicode=true&amp;&amp;characterEncoding=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.还有就是spring-dao.xml里面的Dao接口包写错了 应改为：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leyue.ljp.dao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></bean>]]></content>
      
      
      
        <tags>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot</title>
      <link href="/2022/03/27/Springboot/"/>
      <url>/2022/03/27/Springboot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-boot学习"><a href="#Spring-boot学习" class="headerlink" title="Spring-boot学习"></a>Spring-boot学习</h1><p>官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/index.html">https://docs.spring.io/spring-boot/docs/current/reference/html/index.html</a></p><h2 id="一：SpringBoot-HelloWord"><a href="#一：SpringBoot-HelloWord" class="headerlink" title="一：SpringBoot HelloWord"></a>一：SpringBoot HelloWord</h2><p>一个功能：浏览器发送hello请求并处理，相应Hello Word字符串</p><h3 id="1-创建一个新的Maven工程；Jar"><a href="#1-创建一个新的Maven工程；Jar" class="headerlink" title="1.创建一个新的Maven工程；Jar"></a>1.创建一个新的Maven工程；Jar</h3><h3 id="2-导入一个Springboot相关的依赖"><a href="#2-导入一个Springboot相关的依赖" class="headerlink" title="2.导入一个Springboot相关的依赖"></a>2.导入一个Springboot相关的依赖</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;&lt;/parent&gt;    &lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编写一个主程序类MainApplication-启动主程序"><a href="#3-编写一个主程序类MainApplication-启动主程序" class="headerlink" title="3.编写一个主程序类MainApplication 启动主程序"></a>3.编写一个主程序类MainApplication 启动主程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.boot;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** *  @SpringBootApplication 来标注主程序类 说明这是一个Spring boot应用 */@SpringBootApplicationpublic class MainApplication {    public static void main(String[] args) {        //将springboot启动起来        SpringApplication.run(MainApplication.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-编写Contrtoller层和Service层"><a href="#4-编写Contrtoller层和Service层" class="headerlink" title="4.编写Contrtoller层和Service层"></a>4.编写Contrtoller层和Service层</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.boot.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloController {    @RequestMapping("/hello")    public String handle01(){        return "Hello my first spring-boot2!";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;   &lt;build&gt;       &lt;plugins&gt;           &lt;plugin&gt;               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;           &lt;/plugin&gt;       &lt;/plugins&gt;   &lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、Spring在核心配置文件"><a href="#二、Spring在核心配置文件" class="headerlink" title="二、Spring在核心配置文件"></a>二、Spring在核心配置文件</h2><h3 id="使用-Value进行映射"><a href="#使用-Value进行映射" class="headerlink" title="使用@Value进行映射"></a>使用@Value进行映射</h3><p>一、Spring在核心配置文件application.properties自定义配置一个一个获取@Value</p><h3 id="1-新建一个application-properties"><a href="#1-新建一个application-properties" class="headerlink" title="1.新建一个application.properties"></a>1.新建一个application.properties</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">server.port=8080server.servlet.context-path=/school.name=zhangshanzhiyejishuxueyueanwebsit=https:175.178.51.999asd.name=李津澎asd.websit=https://175.178.51.1111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-新建一个config的包-新建asdConfig的类"><a href="#2-新建一个config的包-新建asdConfig的类" class="headerlink" title="2.新建一个config的包 新建asdConfig的类"></a>2.新建一个config的包 新建asdConfig的类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.boot.config;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component//交给Spring管理@ConfigurationProperties(prefix = "asd")//标注这个是头的名称 对应properties那边public class asdConfig {    private String name;    private String websit;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getWebsit() {        return websit;    }    public void setWebsit(String websit) {        this.websit = websit;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-新建一个Controller"><a href="#3-新建一个Controller" class="headerlink" title="3.新建一个Controller"></a>3.新建一个Controller</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package leyue.ljp.boot.web;import leyue.ljp.boot.config.asdConfig;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class IndexController {    @Autowired //自动注入    private asdConfig asdConfig;    @RequestMapping("fuck")    public String fuck(){        return "asdConfig："+asdConfig.getName()+" "+"asdwebsit:"+asdConfig.getWebsit();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><h2 id="三、集成一个jsp"><a href="#三、集成一个jsp" class="headerlink" title="三、集成一个jsp"></a>三、集成一个jsp</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习网址</title>
      <link href="/2022/03/27/%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80-1/"/>
      <url>/2022/03/27/%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1   <a href="https://www.showdoc.com.cn/1681863734575013/7907979523328270">https://www.showdoc.com.cn/1681863734575013/7907979523328270</a></p><p>2   <a href="https://www.swiper.com.cn/demo/">https://www.swiper.com.cn/demo/</a>             ：轮播图</p><p>3   <a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></p><p>4  <a href="https://man.ilovefishc.com/">https://man.ilovefishc.com/</a>                          ：html+css3</p><p>niuguwen.cn/                           :前端</p><p><a href="https://uniapp.dcloud.io/collocation/pages">https://uniapp.dcloud.io/collocation/pages</a>      ：微信小程序uiapp</p><p><a href="http://c.biancheng.net/view/9346.html">http://c.biancheng.net/view/9346.html</a>               ：C语言学习网站    <a href="http://c.biancheng.net/sitemap/">http://c.biancheng.net/sitemap/</a></p><p><a href="https://www.runoob.com/manual/jquery/">https://www.runoob.com/manual/jquery/</a>               :jquery学习网站</p><p><a href="http://lvyestudy.com/">绿叶学习网 - 给你初恋般的感觉 (lvyestudy.com)</a>     :html5+css3学习网站</p><p><a href="https://pan.baidu.com/disk/home#/all?vmode=list&amp;path=%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%B6%E9%93%B6%E5%8F%B0%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%2BNodejs%E6%97%A0%E4%BA%BA%E6%94%B6%E9%93%B6%E3%80%81%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E8%B4%A7%E6%9E%B6%E3%80%81%E6%97%A0%E4%BA%BA%E9%9B%B6%E5%94%AE%E6%94%B6%E9%93%B6%E7%B3%BB%E7%BB%9F%20%E3%80%9025%E8%AE%B2%E3%80%91">https://pan.baidu.com/disk/home#/all?vmode=list&amp;path=%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%B6%E9%93%B6%E5%8F%B0%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%2BNodejs%E6%97%A0%E4%BA%BA%E6%94%B6%E9%93%B6%E3%80%81%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E8%B4%A7%E6%9E%B6%E3%80%81%E6%97%A0%E4%BA%BA%E9%9B%B6%E5%94%AE%E6%94%B6%E9%93%B6%E7%B3%BB%E7%BB%9F%20%E3%80%9025%E8%AE%B2%E3%80%91</a>                                       :我的百度网盘</p><p><a href="https://www.yuanlrc.com/product/free_product_list.html?page=3&amp;sort=rating">https://www.yuanlrc.com/product/free_product_list.html?page=3&amp;sort=rating</a>     ：前端+后端猿来入此</p><p>chrome://downloads/</p><p><a href="https://antv.vision/zh">https://antv.vision/zh</a>         :学习数据网站</p><p><a href="https://www.starbucks.com.cn/">https://www.starbucks.com.cn/</a>  ：星巴克网站响应式</p><p><a href="https://www.zaixiankaoshi.com/online/search/?keyword=%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F&amp;type=2">https://www.zaixiankaoshi.com/online/search/?keyword=%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F&amp;type=2</a>   ：微信小程序期末考试的试题网站</p><p><a href="https://www.zaixiankaoshi.com/online/paper/detail/?paperid=3777542">https://www.zaixiankaoshi.com/online/paper/detail/?paperid=3777542</a>             ：微信小程序期末考试的试题网站</p><p><a href="https://lbs.qq.com/dev/console/application/mine">https://lbs.qq.com/dev/console/application/mine</a>   :腾讯地图网址</p><p><a href="https://blog.csdn.net/XXY411636013/article/details/101778141?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164122222416781685356693%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164122222416781685356693&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-101778141.pc_search_result_control_group&amp;utm_term=mybatis%E7%8B%82%E7%A5%9E+&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/XXY411636013/article/details/101778141?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164122222416781685356693%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164122222416781685356693&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-101778141.pc_search_result_control_group&amp;utm_term=mybatis%E7%8B%82%E7%A5%9E+&amp;spm=1018.2226.3001.4187</a>              mybatis网址</p><p><a href="https://www.bilibili.com/">https://www.bilibili.com/</a>    ：bili网址</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信开放文档 (qq.com)</a></p><p><a href="https://www.bilibili.com/video/BV1nE41117BQ?p=9&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1nE41117BQ?p=9&amp;spm_id_from=pageDriver</a>    微信小程序项目</p><p><a href="https://cn.vuejs.org/v2/guide/instance.html">Vue 实例 — Vue.js (vuejs.org)</a>  ：vue</p><p><a href="https://www.bilibili.com/video/BV1YV411a7o7?p=3">【最新版】计算机二级MS office真题讲解_哔哩哔哩_bilibili</a>    :jsj</p><p><a href="https://www.bilibili.com/video/BV12J411m7MG?p=3">黑马程序员vue前端基础教程-4个小时带你快速入门vue_哔哩哔哩_bilibili</a>   vue</p><p><a href="https://www.bilibili.com/video/BV1NE411Q7Nx?p=3">【狂神说Java】Mybatis最新完整教程IDEA版通俗易懂_哔哩哔哩_bilibili</a>    mybatis</p><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=5&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV15741177Eh?p=5&amp;spm_id_from=pageDriver</a>   ：vue</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习网址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1+x考试</title>
      <link href="/2022/03/27/1-x%E8%80%83%E8%AF%95/"/>
      <url>/2022/03/27/1-x%E8%80%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Web前端开发初级模拟测试卷（六）"><a href="#Web前端开发初级模拟测试卷（六）" class="headerlink" title="Web前端开发初级模拟测试卷（六）"></a>Web前端开发初级模拟测试卷（六）</h1><p>一、单选题共30题，60分<br>1.阅读下面的JavaScript代码，输出结果是（） B</p><p>function f(y) { var x=y*y; return x; } for(x=0;x&lt; 5;x++) { y=f(x); document.write(y); }<br>1<br>A0 1 2 3 4</p><p>B0 1 4 9 16</p><p>C0 1 4 9 16 25</p><p>D以上答案都不对</p><p>2.在Javascript中，运行下面代码的结果是 A</p><p>function foo(x){ var num=5; bar=function(y){ return (x+y+(++num)); } } console.log(foo(2)); console.log(bar(10)); console.log(bar(10));<br>1<br>Aundefined,18,19<br>B17,18,19<br>C5,18,19<br>Dundefined,18,18<br>3.在JavaScript中，执行下面的代码后，num的值是() C</p><p>var str = “<a href="mailto:wang.wu@gmail.com">wang.wu@gmail.com</a>“; var num = str.indexOf(“.”);<br>1<br>A-1<br>B0<br>C4<br>D13<br>4.以下哪条语句会产生运行错误（） A</p><p>A var obj = ();<br>B var obj = {};<br>C var obj = [];<br>D var obj = //;<br>5.下面代码输出什么() C</p><p>var a=0,b=0; for(;a&lt;10,b&lt;7;a++,b++){ g=a+b; } console.log(g);<br>1<br>A16<br>B10<br>C12<br>D6<br>6.请选择结果为真的表达式（） C</p><p>Anull instanceof Object<br>Bnull === undefined<br>Cnull == undefined<br>DNaN == NaN<br>7.在HTML5中，哪个属性用于规定输入字段是必填的？ B</p><p>Areadonly<br>Brequired<br>Cvalidate<br>Dplaceholder<br>8.HTML5的正确doctype是()？ C</p><ul><li><em>A</em></li><li><em>B</em></li><li><em>C</em><br>1<br>2<br>3</li></ul><p>9.下列表达式成立的是() D</p><ul><li><em>A</em>parseInt(12.5)==parseFloat(12.5)</li><li><em>B</em>Number(“123abc”)==parseFloat(“123abc”)</li><li><em>C</em>isNaN(“abc”)==NaN</li><li><em>D</em>typeof NaN==”number”</li></ul><p>10.以下不属于background-clip的值的是（） D</p><p>Aborder-box<br>Bpadding-box<br>Ccontent-box<br>Dnone<br>11.设定一个元素按规定的动画执行，你需要运用什么规则？ B</p><p>Aanimation<br>Bkeyframes<br>Cflash<br>Dtransition<br>12.在HTML中，通过( )可以实现鼠标悬停在div上时，元素执行旋转45度效果 A</p><ul><li><em>A</em>div:hover{transform:rotate(45deg)}</li><li><em>B</em>div:hover{transform:translate(50px)}</li><li><em>C</em>div:hover{transform:scale(1.5)}</li><li><em>D</em>div:hover{transform:skew(45deg)};<br>1<br>2<br>3<br>4</li></ul><p>13.下面代码输出正确的是() parseInt(3, 8) parseInt(3, 2) parseInt(3, 0) D</p><p>A3, 3, 3<br>B3, 3, NaN<br>C3, NaN, NaN<br>Dother<br>14.在jQuery中，下列关于事件的说法错误的是（ ） A</p><p>AjQuery中用onclick绑定点击事件<br>BjQuery中用on来给未来元素绑定事件<br>CjQuery中用hover来绑定鼠标经过事件<br>DjQuery中存在冒泡事件，故需要阻止冒泡<br>15.让一个动画一直执行的属性是（） B</p><p>Aanimation-direction<br>Banimation-iteration-count<br>Canimation-play-state<br>Danimation-delay<br>16.关于flex说法正确的是（） A</p><p>Aflex 属性用于指定弹性子元素如何分配空间<br>Bflex:1应该写在弹性元素上<br>C设置flex:1无意义<br>Dflex是指设置固定定位<br>17.关于样式的优先级说法正确的是（） C</p><p>A内联样式&gt;!important&gt;内部样式&gt;外部样式&gt;!important<br>B!important&gt;内联样式&gt;内部样式&gt;外部样式<br>C以上都不正确<br>18.下面关于文件路径的说法错误的是（ ） B</p><p>A“…/”是返回当前目录的上一级目录<br>B“…/”是返回当前目录的下一级目录<br>C访问下一级目录直接输入相应的目录名即可<br>D文件路径指文件存储的位置<br>19.以下说法不正确的是（） A</p><p>AHTML5 标准还在制定中<br>BHTML5兼容以前HTML4下浏览器<br>C标签替代Flash<br>D简化的语法<br>20.在HTML中，下列有关邮箱的链接书写正确的是（） D</p><ul><li><em>A</em><a href="telnet:zhangming@aptech.com">发送邮件</a></li><li><em>B</em><a href="mail:zhangming@aptech.com">发送邮件</a></li><li><em>C</em><a href="ftp:zhangming@aptech.com">发送邮件</a></li><li><em>D</em><a href="mailto:zhangming@aptech.com">发送邮件</a><br>1<br>2<br>3<br>4</li></ul><p>21.设置盒子圆角的属性是（） C</p><p>Abox-sizing<br>Bbox-shadow<br>Cborder-radius<br>Dborder<br>22.在HTML中，( )用来表示特殊字符引号 D</p><p>A®<br>B©<br>C”进<br>D “”<br>23.关于box-shadow说法正确的是（） B</p><p>A设置文字投影<br>B第一个值是设置水平距离的<br>C第二个值是设置水平距离的<br>D第三个值是设置投影颜色的<br>24.将div类名以’c’开头元素添加文字为红色，书写正确的是（） A</p><p>Adiv[class^=c]{color:red}<br>Bdiv[class$=c]{color:red}<br>Cdiv[class=c]{color:red}<br>Ddiv[class*=c]{color:red}<br>25.在jQuery中，能够操作HTML代码及其文本的方法是（ ） C</p><p>Aattr()<br>Btext()<br>Chtml()<br>Dval()<br>26.每段文字都需要首行缩进两个字的的距离，该设置什么属性（） C</p><p>Atext-transform<br>Btext-align<br>Ctext-indent<br>Dtext-decoration<br>27.以下关于jQuery 节点的说法中错误是 C</p><p>AjQuery中用$(“.box”).insertBefore(ele1,ele2)给指定ele2前添加ele1元素<br>BjQuery中用$(“.box”).append(ele)给box类后添加ele元素<br>CjQuery中用$(“.box”).appendTo(ele)给box类后添加ele元素<br>DjQuery中用$(“.box”).insertAfter(ele1,ele2)给ele2后添加ele1元素<br>28.在以下选项中，关于JavaScript的Date对象描述正确的是 C</p><p>AgetDay( )方法能返回Date对象的一个月中的一天，其值为1<del>31<br>BgetDate( )方法能返回Date对象的一周中的一天，其值为0</del>6<br>CgetTime( )方法能返回某一时刻(1970年1月1日)依赖的毫秒数<br>DgetYear( )方法只能返回4位年份，长用于获取Date对象的年份<br>29.在HTML中，下面（）不属于HTML文档的基本组成部分 。 A</p><ul><li><em>A</em><style></STYTLE></li><li><em>B</em><BODY></BODY></li><li><em>C</em><HTML></HTML></li><li><em>D</em><HEAD></HEAD><br>1<br>2<br>3<br>4</li></ul><p>30.下列选项中定义标题最合理的是 C</p><ul><li><em>A</em><span class="header">文章标题</span></li><li><em>B</em><p><b>文章标题</b></p></li><li><em>C</em><h2>标题</h2></li><li><em>D</em><div>文章标题</div><br>1<br>2<br>3<br>4<br>二、多选题共15题，30分</li></ul><p>1.请选出正确的选项() ABCD</p><p>A属性要在开始标签中指定，用来表示该标签的性质和特性<br>B通常都是以“属性名&#x3D;“值””的形式来表示<br>C一个标签可以指定多个属性<br>D指定多个属性时不用区分顺序。<br>2.下面哪些是HTML5 新增的表单元素？ AC</p><p>Adatalist<br>Boptgroup<br>Coutput<br>Dlegend<br>3.嵌入在HTML文档中的图像格式可以是()？ ACD</p><p>A *.gif<br>B *.tif<br>C *.bmp<br>D *.jpg<br>4.关于语义化说法不正确的是（） ABC</p><p>A语义化的HTML有利于机器的阅读<br>BTable 属于过时的标签，遇到数据列表时，需尽量使用 div 来模拟表格<br>C语义化是HTML5带来的新概念，此前版本的HTML无法做到语义化<br>DHeader、article、address都属于语义化明确的标签<br>5.下面哪些是javascript中document的方法？ ACDE</p><p>AgetElementById<br>BgetElementsById<br>CgetElementsByTagName<br>DgetElementsByName<br>EgetElementsByClassName<br>6.background-origin的值有哪些（） BCD</p><p>Anone<br>Bborder-box<br>Ccontent-box<br>Dpadding-box<br>7.以下标签书写正确的是()？ BCD</p><ul><li><em>A</em><p/></li><li><em>B</em><br/></li><li><em>C</em><hr/></li><li><em>D</em><img/><br>1<br>2<br>3<br>4</li></ul><p>8.下列关于获取页面元素说法正确正确的是( ) AC</p><p>Adocument.getElementById(‘a’)是通过id值为a获取页面中的一个元素<br>Bdocument.getElementsByName(“na”)是通过name属性值为na获取页面中的一个元素<br>Cdocument.getElementsByTagName(“div”)是通过标签名获取去所有div;<br>D以上说法都不正确;<br>9.关于javascript事件说法不正确的是（） BCD</p><p>A事件由事件函数 事件源 事件对象组成<br>B当前事件作用在哪个标签上,哪个标签就是事件源<br>Conclick 就是一个事件对象<br>D图片切换使用javascript的change事件<br>10.下列选项中属于jQuery属性选择器的是（ ） AC</p><ul><li><em>A</em>$(“img[src$&#x3D;’.gif ‘]”)</li><li><em>B</em>$(“img”)</li><li><em>C</em>$(“[class][title]”)</li><li><em>D</em>$(“div&gt;span”)<br>1<br>2<br>3<br>4</li></ul><p>11.文字溢出显示省略号应该拥有那些属性（） ABCD</p><p>Aoverflow: hidden;<br>Bwhite-space: nowrap;<br>Ctext-overflow: ellipsis;<br>Dwidth:500px<br>12.在JavaScript语法中，下列说法正确的是 AB</p><p>AparseInt(43.12)返回值为43<br>BparseInt(‘abc43.12’)返回值为NaN<br>CparseFloat(‘43.13abc’)&#x3D;&#x3D;parseInt(43.12) 返回true<br>DisNaN(parseFloat(‘45.13abc’))返回true<br>13.网页的元素中包含以下HTML代码：</p> <div id="box"> <h2 id='top1' name='header1'>标题1</h2> <h2 id='top2' name='header2'>标题2</h2> </div> 1下列能弹出"标题1"的jQuery代码是（ ）。 AB<p>Aalert($(’#top1’).text());<br>Balert($(’[name&#x3D;header1]’).text());<br>Calert($(’[name&#x3D;‘header1’]’).text());<br>Dalert($(’#header1’).text());<br>14.关于media说法正确的是（） ABC</p><p>A@media 查询，你可以针对不同的媒体类型定义不同的样式<br>B@media 可以设计响应式页面<br>C当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。<br>D可以用media属性在link中使用<br>15.以下（）是块级元素 AD</p><p>Adiv<br>Bimg<br>Cinput<br>Dp<br>三、判断题共5题，10分<br>1.在jquery中addClass()可以增加多个样式，各个样式间用：隔开 错</p><p>A对<br>B错<br>2.CSS Sprites整理起来更为方便，同一个按钮不同状态的图片也需要一个个切割出来并个别命名 错</p><p>A对<br>B错<br>3.padding:10px;只设置上边填充为10像素，其它三边为零像素 错</p><p>A对<br>B错<br>4.slideUp()方法通过高度变化（向上减小）来动态地隐藏所有匹配的元素 对</p><p>A对<br>B错<br>5.H5就是HTML5的简称 错</p><p>A对<br>B错</p></style></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 1+x考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署到腾讯云</title>
      <link href="/2022/03/27/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
      <url>/2022/03/27/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="Hexo部署到腾讯云"><a href="#Hexo部署到腾讯云" class="headerlink" title="Hexo部署到腾讯云"></a>Hexo部署到腾讯云</h3><h5 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h5><p>本地Windows10操作系统</p><p>腾讯云Cenots7.6服务器</p><h5 id="2-准备"><a href="#2-准备" class="headerlink" title="2.准备"></a>2.准备</h5><p>Hexo 本地博客</p><p>Xshell 链接到你的服务器</p><h3 id="二、云服务器配置Git"><a href="#二、云服务器配置Git" class="headerlink" title="二、云服务器配置Git"></a>二、云服务器配置Git</h3><p>1.安装依赖库</p><pre class="line-numbers language-none"><code class="language-none">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.安装编译工具</p><pre class="line-numbers language-none"><code class="language-none">yum install gcc perl-ExtUtils-MakeMaker package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.查看git的版本y</p><pre class="line-numbers language-none"><code class="language-none">git version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.删除git</p><pre class="line-numbers language-none"><code class="language-none">yum remove git -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.下载解压最新版.</p><pre class="line-numbers language-apl" data-language="apl"><code class="language-apl">cd /usr/local/src #下载的目录 wget https://www.kernel.org/pub/software/scm/git/git-2.28.0.tar.gz #下载最新版 tar -zxvf git-2.28.0.tar.gz #解压到当前文件夹来源: Fuchenchenle文章作者: Fuchenchenle文章链接: https://fuchenchenle.cn/2020/08/18/hexo%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91/本文章著作权归作者所有，任何形式的转载都请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.编辑并安装</p><pre class="line-numbers language-api" data-language="api"><code class="language-api">cd git-2.28.0    #进入文件夹make prefix=/usr/local/git all    #编译源码make prefix=/usr/local/git install    #安装路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.配置git的环境变量</p><pre class="line-numbers language-none"><code class="language-none">echo 'export PATH=$PATH:/usr/local/git/bin' &gt;&gt; /etc/bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.刷新环境变量</p><pre class="line-numbers language-none"><code class="language-none">source /etc/bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.查看版本号</p><pre class="line-numbers language-none"><code class="language-none">git --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10创建git用户并且修改权限</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">adduser fuchen passwd fuchen chmod 740 /etc/sudoers vim /etc/sudoers root ALL=(ALL) ALL fuchen ALL=(ALL) ALL来源: Fuchenchenle文章作者: Fuchenchenle文章链接: https://fuchenchenle.cn/2020/08/18/hexo%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91/本文章著作权归作者所有，任何形式的转载都请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.本地windows10使用Gitbash创建密钥</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12.将本地创建id_rsa.pub中文件复制</p><pre class="line-numbers language-none"><code class="language-none">su fuchenmkdir ~/.sshvim ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>13.本地测试</p><pre class="line-numbers language-none"><code class="language-none">ssh -v fuchen@服务器ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、云服务器网站配置"><a href="#三、云服务器网站配置" class="headerlink" title="三、云服务器网站配置"></a>三、云服务器网站配置</h3><p>1.创建网站目录并且设置权限</p><pre class="line-numbers language-none"><code class="language-none">su rootmkdir /home/hexochown fuchen:fuchen -R /home/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.安装Nginx</p><pre class="line-numbers language-none"><code class="language-none">yum install -y nginxsystemctl start nginx.service    #启动服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.修改Nginx配置文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">vim /etc/nginx/nginx.conf  server { listen 80 default_server; listen [::]:80 default_server; server_name fuchenchenle.cn; #域名  root /home/hexo; #网站目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.重启服务器</p><pre class="line-numbers language-none"><code class="language-none">systemctl restart nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.建立git仓库</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.同步网站根目录</p><pre class="line-numbers language-none"><code class="language-none">vim blog.git/hooks/post-receive#!/bin/shgit --work-tree=/home/hexo --git-dir=/home/fuchen/blog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>7.修改权限</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.在windows10本地hexo目录修改_config.yml文件</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: fuchen@49.232.59.235:/home/fuchen/blog.git    #用户名@服务器Ip:git仓库位置  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>9.在本机gitbash部署</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="四、常见报错"><a href="#四、常见报错" class="headerlink" title="四、常见报错"></a>四、常见报错</h3><h5 id="1-git-upload-pack-未找到命令"><a href="#1-git-upload-pack-未找到命令" class="headerlink" title="1. git-upload-pack: 未找到命令"></a>1. git-upload-pack: 未找到命令</h5><pre class="line-numbers language-none"><code class="language-none">bash: git-upload-pack: command not foundfatal: Could not read from remote repository.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方法</p><pre class="line-numbers language-none"><code class="language-none">sudo ln -s  /usr/local/git/bin/git-upload-pack  /usr/bin/git-upload-pack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-无法远程连接获取"><a href="#3-无法远程连接获取" class="headerlink" title="3.无法远程连接获取"></a>3.无法远程连接获取</h5><pre class="line-numbers language-none"><code class="language-none">fatal: Could not read from remote repository.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法</p><pre class="line-numbers language-none"><code class="language-none">重试或者 删掉本地ssh公钥重新上传至服务器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-key出错"><a href="#4-key出错" class="headerlink" title="4.key出错"></a>4.key出错</h5><pre class="line-numbers language-none"><code class="language-none">Host key verification failed.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -R 你要访问的IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2022/03/27/Vue/"/>
      <url>/2022/03/27/Vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="一-计算属性"><a href="#一-计算属性" class="headerlink" title="一.计算属性"></a>一.计算属性</h2><h2 id="1-1计算属性的本质"><a href="#1-1计算属性的本质" class="headerlink" title="1.1计算属性的本质"></a>1.1计算属性的本质</h2><p>fullname：{set（），get（）}</p><p>1.2计算属性和methods对比</p><p>计算属性在多次使用时 只会调用一次</p><p>他是有缓存的</p><h2 id="二-时间监听"><a href="#二-时间监听" class="headerlink" title="二.时间监听"></a>二.时间监听</h2><h3 id="2-1-事件监听基本使用"><a href="#2-1-事件监听基本使用" class="headerlink" title="2.1 事件监听基本使用"></a>2.1 事件监听基本使用</h3><h3 id="2-2-参数问题"><a href="#2-2-参数问题" class="headerlink" title="2.2 参数问题"></a>2.2 参数问题</h3><p>btnClick</p><p>btnClick(event)</p><p>btnClick(abcm,event)-&gt;$event</p><h3 id="2-3-修饰符"><a href="#2-3-修饰符" class="headerlink" title="2.3.修饰符"></a>2.3.修饰符</h3><p>stop</p><p>prevent</p><p>.enter</p><p>.once</p><p>.native</p><h2 id="三-条件判断"><a href="#三-条件判断" class="headerlink" title="三.条件判断"></a>三.条件判断</h2><h3 id="3-1-v-if-v-else-v-else"><a href="#3-1-v-if-v-else-v-else" class="headerlink" title="3.1 v-if  v-else v-else"></a>3.1 v-if  v-else v-else</h3><h3 id="3-2登录小案例"><a href="#3-2登录小案例" class="headerlink" title="3.2登录小案例"></a>3.2登录小案例</h3><h3 id="3-3-v-show"><a href="#3-3-v-show" class="headerlink" title="3.3 v-show"></a>3.3 v-show</h3><p>v-show和v-if的区别</p><p>四.循环遍历</p><p>4.1遍历数组</p><p>4.2遍历对象</p><p>value</p><p>value，key</p><p>value,key,index </p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
